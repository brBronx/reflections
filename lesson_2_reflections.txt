How did viewing a diff between two versions of a file help you see the bug that was introduced?
  The comparison saves having to read line-by-line which too often makes it difficult to spot the differences.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
  It makes it easy to see the evolution of what worked and what didn't.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
  Pros - You are in control to determine when significant changes have been made.  Cons - you may delay too long before doing another commit so that too many changes have been made.

What happens when you initialize a repository? Why do you need to do it?
  A .git file is created to contain metadata.  The repository allows saving of programs periodically with the ability
  to compare later and earlier versions.
  
How is the staging area different from the working directory and the repository? What value do you think it offers?
  Staging area is the first level of commit from the working directory where active work is being done.  The Staging area
  does permit recall prior to a commit to the repository by using the 'git reset file_name' command.

How can you use the staging area to make sure you have one commit per logical change?
  By using the git diff statement, the differences between the working directory (current copy) and the staging area will be highlighted.  After making a logical change, don't just 'add' to the Staging Area but also 'commit' so that the change will be in the repository.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
  When making a re-design involving major changes is needed, it'd be beneficial to know where the 'leap' was made to the new design while still retaining the old one.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
  Merging the branches yields a single branch incorporating the code from each and forcing the user to resolve
  any conflicts that arose.  They're represented in the diagram by joining at a common 'tip'.  

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
  Pro: Can see all conflicts and correct them by observing the code.  Con:  Less control of the merged code.

  


